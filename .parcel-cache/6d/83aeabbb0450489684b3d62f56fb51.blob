"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _View = _interopRequireDefault(require("./View.js"));

var _icons = _interopRequireDefault(require("url:../../img/icons.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Parcel v2
class PaginationView extends _View.default {
  _parentElement = document.querySelector('.pagination');
  /* 
    _generateMarkup() {
      const curPage = this._data.page;
      const numPages = Math.ceil(
        this._data.results.length / this._data.resultsPerPage
      );
  
      // Page 1, and there are other pages
      if (curPage === 1 && numPages > 1) {
        return this._generateMarkupButton(curPage, 'next');
      }
  
      // Last page
      if (curPage === numPages && numPages > 1) {
        return this._generateMarkupButton(curPage, 'prev');
      }
  
      // Other page
      if (curPage < numPages) {
        return (
          this._generateMarkupButton(curPage, 'next'),
          this._generateMarkupButton(curPage, 'prev')
        );
      }
  
      // Page 1, and there are no other pages
      return '';
    }
  
    _generateMarkupButton(curPage, pageBtn) {
      const prevBtn = `
        <button class="btn--inline pagination__btn--prev">
          <svg class="search__icon">
            <use href="${icons}#icon-arrow-left"></use>
          </svg>
          <span>Page ${curPage - 1}</span>
        </button>
        `;
  
      const nextBtn = `
        <button class="btn--inline pagination__btn--next">
          <span>Page ${curPage + 1}</span>
          <svg class="search__icon">
            <use href="${icons}#icon-arrow-right"></use>
          </svg>
        </button>
      `;
  
      if (pageBtn === 'prev') return prevBtn;
      if (pageBtn === 'next') return nextBtn;
    }
   */

  /* 
  _generateMarkup() {
    const curPage = this._data.page;
    const numPages = Math.ceil(
      this._data.results.length / this._data.resultsPerPage
    );
    console.log(numPages);
      // Page 1, and there are other pages
    if (curPage === 1 && numPages > 1) {
      return `
      <button class="btn--inline pagination__btn--next">
        <span>Page ${curPage + 1}</span>
        <svg class="search__icon">
          <use href="${icons}#icon-arrow-right"></use>
        </svg>
      </button>
      `;
    }
      // Last page
    if (curPage === numPages && numPages > 1) {
      return `
      <button class="btn--inline pagination__btn--prev">
        <svg class="search__icon">
          <use href="${icons}#icon-arrow-left"></use>
        </svg>
        <span>Page ${curPage - 1}</span>
      </button>
      `;
    }
      // Other page
    if (curPage < numPages) {
      return `
      <button class="btn--inline pagination__btn--prev">
        <svg class="search__icon">
          <use href="${icons}#icon-arrow-left"></use>
        </svg>
        <span>Page ${curPage - 1}</span>
      </button>
      <button class="btn--inline pagination__btn--next">
        <span>Page ${curPage + 1}</span>
        <svg class="search__icon">
          <use href="${icons}#icon-arrow-right"></use>
        </svg>
      </button>
      `;
    }
      // Page 1, and there are no other pages
    return ''; 
    */

}

var _default = new PaginationView();

exports.default = _default;